version: "3.9"

services:
  # Database Services
  postgres:
    container_name: postgres_container
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "db"
      POSTGRES_USER: "dbuser"
      POSTGRES_PASSWORD: "dbpassword"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:6.19
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-5050}:80
    networks:
      - app-network
    restart: unless-stopped

  # Backend Services
  go-api:
    image: go-api
    container_name: go-server
    build:
      context: ./server/go
      dockerfile: Dockerfile
    networks:
      - app-network
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=db
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=dbpassword
      - SERVER_PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service
  frontend:
    image: frontend-app
    build:
      context: ./pmaster
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      - go-api

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - go-api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge